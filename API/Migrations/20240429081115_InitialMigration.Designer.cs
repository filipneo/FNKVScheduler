// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerAppAPICore;

#nullable disable

namespace SchedulerAppAPICore.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240429081115_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SchedulerAppAPICore.Models.Ambulance", b =>
                {
                    b.Property<int>("AmbulanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AmbulanceId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCap")
                        .HasColumnType("int");

                    b.Property<int>("MinCap")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OptCap")
                        .HasColumnType("int");

                    b.HasKey("AmbulanceId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Ambulances");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.CalEvent", b =>
                {
                    b.Property<int>("CalEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CalEventId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.HasKey("CalEventId");

                    b.ToTable("CalEvents");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int?>("HeadEmpId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCap")
                        .HasColumnType("int");

                    b.Property<int?>("MinCap")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OptCap")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HeadEmpId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.EmpCategory", b =>
                {
                    b.Property<int>("EmpCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmpCategoryId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EmpCategoryId");

                    b.ToTable("EmpCategories");

                    b.HasData(
                        new
                        {
                            EmpCategoryId = 1,
                            Color = "#0e7d01",
                            Name = "Doktor"
                        });
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmpCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FixedAmbulanceIds")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "fixedAmbIds");

                    b.Property<string>("FixedDays")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("FromLimit")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NameCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PreferredAmbulanceIds")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "preferredAmbIds");

                    b.Property<DateTime?>("ToLimit")
                        .HasColumnType("date");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmpCategoryId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Email = "john.smith@example.com",
                            EmpCategoryId = 1,
                            FirstName = "John",
                            FixedAmbulanceIds = "[]",
                            LastName = "Smith",
                            NameCode = "JS",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Email = "emma.johnson@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Emma",
                            FixedAmbulanceIds = "[]",
                            LastName = "Johnson",
                            NameCode = "EJ",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Email = "michael.williams@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Michael",
                            FixedAmbulanceIds = "[]",
                            LastName = "Williams",
                            NameCode = "MW",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Email = "sarah.brown@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Sarah",
                            FixedAmbulanceIds = "[]",
                            LastName = "Brown",
                            NameCode = "SB",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Email = "james.jones@example.com",
                            EmpCategoryId = 1,
                            FirstName = "James",
                            FixedAmbulanceIds = "[]",
                            LastName = "Jones",
                            NameCode = "JJ",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Email = "jennifer.davis@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Jennifer",
                            FixedAmbulanceIds = "[]",
                            LastName = "Davis",
                            NameCode = "JD",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Email = "david.miller@example.com",
                            EmpCategoryId = 1,
                            FirstName = "David",
                            FixedAmbulanceIds = "[]",
                            LastName = "Miller",
                            NameCode = "DM",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Email = "jessica.wilson@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Jessica",
                            FixedAmbulanceIds = "[]",
                            LastName = "Wilson",
                            NameCode = "JW",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 9,
                            Email = "daniel.taylor@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Daniel",
                            FixedAmbulanceIds = "[]",
                            LastName = "Taylor",
                            NameCode = "DT",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        },
                        new
                        {
                            EmployeeId = 10,
                            Email = "emily.clark@example.com",
                            EmpCategoryId = 1,
                            FirstName = "Emily",
                            FixedAmbulanceIds = "[]",
                            LastName = "Clark",
                            NameCode = "EC",
                            Phone = "123456789",
                            PreferredAmbulanceIds = "[]"
                        });
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShiftId"));

                    b.Property<int>("AmbulanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PartOfTheDay")
                        .HasColumnType("int");

                    b.HasKey("ShiftId");

                    b.HasIndex("AmbulanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Vacation", b =>
                {
                    b.Property<int>("VacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VacationId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<string>("NewEmpName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.Property<int>("VacationState")
                        .HasColumnType("int");

                    b.HasKey("VacationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("fixed_ambulance", b =>
                {
                    b.Property<int>("FixedAmbulancesAmbulanceId")
                        .HasColumnType("int");

                    b.Property<int>("FixedEmployeesEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("FixedAmbulancesAmbulanceId", "FixedEmployeesEmployeeId");

                    b.HasIndex("FixedEmployeesEmployeeId");

                    b.ToTable("fixed_ambulance");
                });

            modelBuilder.Entity("preferred_ambulance", b =>
                {
                    b.Property<int>("PreferredAmbulancesAmbulanceId")
                        .HasColumnType("int");

                    b.Property<int>("PreferredEmployeesEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("PreferredAmbulancesAmbulanceId", "PreferredEmployeesEmployeeId");

                    b.HasIndex("PreferredEmployeesEmployeeId");

                    b.ToTable("preferred_ambulance");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Ambulance", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Department", "Department")
                        .WithMany("Ambulances")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Department", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Employee", "HeadEmployee")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("HeadEmpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadEmployee");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Employee", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.EmpCategory", "EmpCategory")
                        .WithMany("Employees")
                        .HasForeignKey("EmpCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmpCategory");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Shift", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Ambulance", "Ambulance")
                        .WithMany("Shifts")
                        .HasForeignKey("AmbulanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulerAppAPICore.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ambulance");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Vacation", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Employee", "Employee")
                        .WithMany("Vacations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("fixed_ambulance", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Ambulance", null)
                        .WithMany()
                        .HasForeignKey("FixedAmbulancesAmbulanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerAppAPICore.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("FixedEmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preferred_ambulance", b =>
                {
                    b.HasOne("SchedulerAppAPICore.Models.Ambulance", null)
                        .WithMany()
                        .HasForeignKey("PreferredAmbulancesAmbulanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerAppAPICore.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("PreferredEmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Ambulance", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Department", b =>
                {
                    b.Navigation("Ambulances");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.EmpCategory", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SchedulerAppAPICore.Models.Employee", b =>
                {
                    b.Navigation("HeadOfDepartments");

                    b.Navigation("Shifts");

                    b.Navigation("Vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
